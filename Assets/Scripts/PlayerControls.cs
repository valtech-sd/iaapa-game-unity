//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""043fd38e-6cc5-4c59-bad2-7b22a42d54fa"",
            ""actions"": [
                {
                    ""name"": ""SwitchCam1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""61841b22-69c8-4c1a-b1a5-6ebe3a4147b1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCam2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eb297895-bfc4-4da2-baf2-6fa36ab677af"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCam3"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6944fdbf-329e-4ea9-8c89-80f2ed814fb0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e735851-14af-4869-ac9a-ac7b85fcbd31"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCam1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e44f816-7417-48ff-8682-84268543fa24"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCam2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd1e308c-4a3f-4b8d-8f3d-0482419ee088"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCam3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SwitchCam1 = m_Player.FindAction("SwitchCam1", throwIfNotFound: true);
        m_Player_SwitchCam2 = m_Player.FindAction("SwitchCam2", throwIfNotFound: true);
        m_Player_SwitchCam3 = m_Player.FindAction("SwitchCam3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_SwitchCam1;
    private readonly InputAction m_Player_SwitchCam2;
    private readonly InputAction m_Player_SwitchCam3;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchCam1 => m_Wrapper.m_Player_SwitchCam1;
        public InputAction @SwitchCam2 => m_Wrapper.m_Player_SwitchCam2;
        public InputAction @SwitchCam3 => m_Wrapper.m_Player_SwitchCam3;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @SwitchCam1.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam1;
                @SwitchCam1.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam1;
                @SwitchCam1.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam1;
                @SwitchCam2.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam2;
                @SwitchCam2.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam2;
                @SwitchCam2.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam2;
                @SwitchCam3.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam3;
                @SwitchCam3.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam3;
                @SwitchCam3.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchCam3;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchCam1.started += instance.OnSwitchCam1;
                @SwitchCam1.performed += instance.OnSwitchCam1;
                @SwitchCam1.canceled += instance.OnSwitchCam1;
                @SwitchCam2.started += instance.OnSwitchCam2;
                @SwitchCam2.performed += instance.OnSwitchCam2;
                @SwitchCam2.canceled += instance.OnSwitchCam2;
                @SwitchCam3.started += instance.OnSwitchCam3;
                @SwitchCam3.performed += instance.OnSwitchCam3;
                @SwitchCam3.canceled += instance.OnSwitchCam3;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSwitchCam1(InputAction.CallbackContext context);
        void OnSwitchCam2(InputAction.CallbackContext context);
        void OnSwitchCam3(InputAction.CallbackContext context);
    }
}
